#define buffer 32
// MMC module connections
sbit Mmc_Chip_Select at LATC0_bit;
sbit Mmc_Chip_Select_Direction at TRISC0_bit;
unsigned int valor_ad = 0;
unsigned long tensao = 0, pulsos, ciclos, total, tot; unsigned char mil,cem,dez,un, error;
unsigned int valor, sd_card=0, uart=0, count=0, x, j=0, sec=0, temp=0, timer=0; unsigned char filename[] = "data.txt";
unsigned char temperatura[buffer];
unsigned char m_total = 0, c_total = 0, d_total = 0, u_total = 0, Kmh = 0, Kmh_disp=0;
unsigned char m1_total = 0, c1_total = 0, d1_total = 0, u1_total = 0 , m_Kmh=0, c_Kmh=0, d_Kmh=0 , u_Kmh=0;
void interrupt (void) { if(PIR1.CCP1IF)
{
PIR1.CCP1IF = 0; // Limpa a flag para nova captura pulsos ++;
}
if (PIR2.CCP2IF){ PIR2.CCP2IF = 0;
ciclos++;
}
else if(INTCON.TMR0IF){
PIE2.CCP2IE = 0; // Desabilita interrupção - periféricos CCP2 PIE1.CCP1IE = 0; // Desabilita interrupção - periféricos CCP1 TMR0H = 0x67;
TMR0L = 0x6A;
sd_card++; timer++; uart++;
INTCON.TMR0IF = 0; //Zera flag timer 1
PIE2.CCP2IE = 1; // Habilita interrupção - periféricos CCP2 PIE1.CCP1IE = 1; // Habilita interrupção - periféricos CCP1
}
}
void send_preamble(){
int cha; for(cha=0;cha<5;cha++){ UART1_Write(0xF8);
}
UART1_Write(0xFA);
}
void start_byte(){ UART1_Write('(');
}
void stop_byte(){ UART1_Write(')');
}
void main() {
TRISC = 0b00000110;
TRISA.RA0 = 1; // AN0 como entrada TRISB.RB0 = 0;
TRISB.RB1 = 0;
T3CON.T3CCP1=0; T3CON.T3CCP2=0;
INTCON.GIE = 1; // Habilita chave geral das interrupções INTCON.PEIE = 1; // Habilita Interrupção dos periféricos
PIE2.CCP2IE = 1;
PIE1.CCP1IE = 1; // Habilita Interrupção do módulo CCP
//T1CON = 0b10111001; // Liga TIMER1, prescaler 1:8, Clock interno T0CON = 0b10000110; // Liga TIMER1, prescaler 1:8, Clock interno
CCP1CON = 0b00000101; // CCP1 em modulo CAPTURA e borda de SUBIDA CCP2CON = 0b00000101;
//CCP1CON = 0b00000100; // CCP1 em modulo CAPTURA e borda de DESCIDA PIR1.CCP1IF = 0; // Limpa a flag para nova captura
PIR2.CCP2IF = 0; // Limpa a flag para nova captura INTCON.TMR0IE = 1; // Habilita a interrupção para o Timer 0 INTCON.TMR0IF = 0; // Zera a flag do Timer 0 INTCON2.TMR0IP = 1; // Habilita prioridade para o Timer 0
// T = Tcy * Prescaler * (65536 - x)
// 1s = 0,2*10^-6 * 128 * (65536 – x)
// x = 676A TMR0H = 0x67; TMR0L = 0x6A;
T0CON = 0b10010110; // Habilita Timer 0, 16 bits, borda de subida, prescaler de 128 INTCON.TMR0IE = 1; // Habilita a interrupção para o Timer 0
INTCON.TMR0IF = 0; // Zera a flag do Timer 0 INTCON2.TMR0IP = 1; // Habilita prioridade para o Timer 0
RCON.IPEN= 1; // Habilita prioridades de interrupção INTCON.GIEH= 1; // Habilita interrupção de alta prioridade INTCON.GIEL= 1; // Habilita interrupção de baixa prioridade
// Configuração do conversor A/D
CMCON = 0x07; // desabilita comparadores
ADCON0 = 0b00000011; // Seleciona AN0 e habilita A/D
ADCON1 = 0b00001110; //Habilita AN0 como analógico, Vref+ =Vcc e Vref-=Vss ADCON2 = 0b10010101; //Alinhado a direita, TACQ = 4TAD TAD = FOSC/16 Delay_ms(100); // 0,1s
// Inicializando a comunicação serial UART
UART1_Init(1200);
Delay_ms(100); // Para estabilizar
SPI1_Init_Advanced(_SPI_MASTER_OSC_DIV16, _SPI_DATA_SAMPLE_MIDDLE,
_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
Delay_us(10);
error = MMC_Fat_Init(); while(error == 1)
{
error = MMC_Fat_Init();
}
if(error==0){
PORTB.RB0 = ~PORTB.RB0;
MMC_Fat_Init();
SPI1_Init_Advanced(_SPI_MASTER_OSC_DIV4, _SPI_DATA_SAMPLE_MIDDLE,
_SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
Mmc_Fat_Assign(&filename,0x80);
}
while(1){
tensao=ADC_Read(0);
tensao = (tensao*500/1023)*10; // Alimentando o pic em 5V valor = tensao;
mil = valor/(1000); valor = valor%1000; cem = valor/100; valor = valor%100; dez = valor/10;
un = valor%10;
if (timer == 1)
{
timer = 0;
total = pulsos *(60/3) ; tot= ciclos * (60/8);
Kmh=(tot*1.627847*60)/1000;
Kmh_disp = Kmh;
m_Kmh = Kmh_disp/1000; Kmh_disp = Kmh_disp%1000; c_Kmh = Kmh_disp/100; Kmh_disp = Kmh_disp%100; d_Kmh = Kmh_disp/10; u_Kmh = Kmh_disp%10;
m1_total = tot/1000; tot = tot%1000; c1_total = tot/100; tot = tot%100; d1_total = tot/10; u1_total = tot%10;
m_total = total/1000;
total = total%1000; c_total = total/100; total = total%100; d_total = total/10; u_total = total%10;
ciclos=0; pulsos = 0;
}
else if (timer > 1)
{
timer = 0;
}
if(uart==3){ uart =0;
while(UART1_Tx_Idle()==1){ send_preamble(); start_byte();
UART1_Write(mil + 48);
UART1_Write(cem + 48);
UART1_Write(dez + 48); UART1_Write(44); UART1_Write(un+48); UART1_Write(d_kmh + 48);
UART1_Write(u_kmh + 48); UART1_Write(m_total+48); UART1_Write(c_total+48); UART1_Write(d_total+48); UART1_Write(u_total+48); UART1_Write('\n'); UART1_Write('\r');
stop_byte(); send_preamble();} Delay_ms(100);
}
else if(uart>3){
uart =0;
}
if(sd_card==10){
PORTB.RB1 = ~PORTB.RB1;
sd_card=0;
Temperatura[0] = 'T'; 
Temperatura[1] = 'E'; 
Temperatura[2] = 'M'; 
Temperatura[3] = 'P'; 
Temperatura[4] = '='; 
Temperatura[5] = mil+48;
Temperatura[6] = cem+48; 
Temperatura[7] = dez+48; 
Temperatura[8] = ','; 
Temperatura[9] = un+48; 
Temperatura[10] = ' ';
Temperatura[11] = 'V'; 
Temperatura[12] = 'E'; 
Temperatura[13] = 'L'; 
Temperatura[14] = ':'; 
Temperatura[15] = d_kmh+48;
Temperatura[16] = u_kmh+48;
Temperatura[17] = ' ';
Temperatura[18] = 'k';
Temperatura[19] = 'm'; 
Temperatura[20] = '/'; 
Temperatura[21] = 'h'; 
Temperatura[22] = ' '; 
Temperatura[23] = 'R'; 
Temperatura[24] = 'P'; 
Temperatura[25] = 'M'; 
Temperatura[26] = ':';
Temperatura[27] = ' ';
Temperatura[28] = m_total+48;
Temperatura[29] = c_total+48;
Temperatura[30] = d_total+48;
Temperatura[31] = u_total+48;
Temperatura[32] = '\r';
Temperatura[33]='\n'; Mmc_Fat_Append(); Mmc_Fat_Write(Temperatura,36); Delay_ms(100);
PORTB.RB1 = 0;
}
else if(sd_card>10){ sd_card=0;}
}
}
